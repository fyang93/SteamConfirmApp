@using SteamAuth
@using Microsoft.JSInterop

@inject Services.SteamGuardTimerService GuardTimer
@inject IJSRuntime JS
@inject ILogger<AccountCard> Logger

<div class="card text-center @(Selected ? "border-primary" : "")" @onclick="OnCardClick" style="max-width: 28rem;">
    <div class="card-body">
        <h5 class="card-title">@Account?.AccountName</h5>
        <h4 class="card-text" @ref=_tokenElemRef @onclick="OnTokenClick" @onmouseleave="OnTokenMouseLeave" data-bs-toggle="tooltip" data-bs-title="点击复制">@_loginToken</h4>
        <div class="progress">
            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-label="Animated striped example" aria-valuenow="@(GuardTimer.SecondsUntilChange)" aria-valuemin="0" aria-valuemax="30" style="width: @(GuardTimer.PercentageUntilChange)"></div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public SteamGuardAccount? Account { get; set; } = null;

    [Parameter]
    public bool Selected { get; set; } = false;

    [Parameter]
    public EventCallback OnClick { get; set; }

    private ElementReference _tokenElemRef;

    private string _loginToken = "XXXXX";
    private int _currentProgress = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeTooltips");
        }
    }

    private async Task OnTokenClick()
    {
        try
        {
            await JS.InvokeVoidAsync("copyToClipboard", _loginToken);
            await JS.InvokeVoidAsync("updateTooltipContent", _tokenElemRef, "已复制");
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error copying text: {ex.Message}");
        }
    }

    private async Task OnTokenMouseLeave()
    {
        try
        {
            await JS.InvokeVoidAsync("updateTooltipContent", _tokenElemRef, "点击复制");
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error updating tooltip: {ex.Message}");
        }
    }

    #region 自动更新令牌
    protected override void OnInitialized()
    {
        GuardTimer.OnTickAsync += UpdateStateAsync;
    }

    public void Dispose()
    {
        GuardTimer.OnTickAsync -= UpdateStateAsync;
    }

    private async Task UpdateStateAsync()
    {
        _loginToken = Account?.GenerateSteamGuardCodeForTime(GuardTimer.SteamTime) ?? "XXXXX";
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnCardClick()
    {
        await OnClick.InvokeAsync(null);
    }
    #endregion
}