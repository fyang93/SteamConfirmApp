@page "/"

@using SteamAuth
@using System.ComponentModel

@inject ILogger<Home> Logger
@inject IWebHostEnvironment Environment
@inject ProtectedLocalStorage ProtectedLocalStore
@inject Services.SteamTradesTimerService TradesTimer

<PageTitle>Steam确认工具</PageTitle>

<Config />

<div class="pe-sm-1 pe-md-2">
    <div class="accordion" id="accordionPanelsStayOpenExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="heading-account">
                <button class="accordion-button @(_accounts.Any() ? "" : "collapsed")" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-account" aria-expanded="@(_accounts.Any() ? "true" : "false")" aria-controls="collapse-account">
                    账号列表
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-primary">
                        @_accounts.Count
                    </span>
                </button>
            </h2>
            <div id="collapse-account" class="accordion-collapse collapse @(_accounts.Any() ? "show" : "")" aria-labelledby="heading-account">
                <div class="accordion-body">
                    <div class="row row-cols-2 row-cols-md-3 row-cols-lg-4 row-cols-xxl-6 g-4">
                        @if (_accounts.Any())
                        {
                            @foreach (var account in _accounts)
                            {
                                <div class="col">
                                    <AccountCard Account="@account" Selected="@(account == _currentAccount)" OnClick="@(() => SetCurrentCard(account))" />
                                </div>
                            }
                        }
                        else
                        {
                            <span class="text-danger">暂无账号</span>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="heading-confirm">
                <button class="accordion-button @(_accounts.Any() ? "" : "collapsed")" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-confirm" aria-expanded="@(_accounts.Any() ? "true" : "false")" aria-controls="collapse-confirm">
                    确认列表
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-primary">
                        @_confirmations.Values.Sum(x => x.Count)
                    </span>
                </button>
            </h2>
            <div id="collapse-confirm" class="accordion-collapse collapse @(_accounts.Any() ? "show" : "")" aria-labelledby="heading-confirm">
                <div class="accordion-body">
                    @if (_confirmations.Values.Any(x => x.Any()))
                    {
                        <div class="table-responsive">
                            <table class="table align-middle">
                                <thead>
                                    <tr>
                                        <th scope="col">账号</th>
                                        <th scope="col">图标</th>
                                        <th scope="col">内容</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var account in _confirmations.Keys)
                                    {
                                        @foreach (var confirm in _confirmations[account])
                                        {
                                            <tr>
                                                <td>@account.AccountName</td>
                                                <td>
                                                    @if (string.IsNullOrEmpty(confirm.Icon))
                                                    {
                                                        <span class="text-danger">无</span>
                                                    }
                                                    else
                                                    {
                                                        <img src="@confirm.Icon" class="rounded" style="width: 60px; height: 60px;">
                                                    }
                                                </td>
                                                <td>@($"{confirm.Headline}\n{confirm.Creator.ToString()}\n{String.Join("\n", confirm.Summary)}")</td>
                                                <td>
                                                    <div class="btn-group" role="group">
                                                        <button type="button" class="btn btn-danger" @onclick="() => DenyConfirmationAsync(account, confirm)">@confirm.Cancel</button>
                                                        <button type="button" class="btn btn-primary" @onclick="() => AcceptConfirmationAsync(account, confirm)">@confirm.Accept</button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                    <span class="text-danger">暂无确认</span>
                    }
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="heading-upload">
                <button class="accordion-button @(_accounts.Any() ? "collapsed" : "")" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-upload" aria-expanded="@(_accounts.Any() ? "false" : "true")" aria-controls="collapse-upload">
                    上传令牌
                </button>
            </h2>
            <div id="collapse-upload" class="accordion-collapse collapse @(_accounts.Any() ? "" : "show")" aria-labelledby="heading-upload">
                <div class="accordion-body">
                    <Upload AccpetFileExtension=".maFile,.json" OnUploadComplete="@GetAccounts" />
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    public Settings Settings { get; set; }

    private Manifest? _manifest;
    private List<SteamGuardAccount> _accounts = new();
    private Dictionary<SteamGuardAccount, List<Confirmation>> _confirmations = new();
    private SteamGuardAccount? _currentAccount;
    private static SemaphoreSlim _confirmSemaphore = new(1, 1);

    protected override void OnInitialized()
    {
        GetAccounts();

        Settings.PropertyChanged += OnSettingsChanged;
        TradesTimer.OnTickAsync += GetConfirmsAsync;
    }

    public void Dispose()
    {
        Settings.PropertyChanged -= OnSettingsChanged;
        TradesTimer.OnTickAsync -= GetConfirmsAsync;
    }

    private void OnSettingsChanged(object? sender, PropertyChangedEventArgs e)
    {
        switch (e.PropertyName)
        {
            case nameof(Settings.Username):
            case nameof(Settings.Passkey):
                GetAccounts();
                break;
        }
        InvokeAsync(StateHasChanged);

        ProtectedLocalStore.SetAsync("settings", Settings);
    }

    private async Task AcceptConfirmationAsync(SteamGuardAccount account, Confirmation confirm)
    {
        await account.AcceptConfirmation(confirm);
        _confirmations.GetValueOrDefault(account)?.Remove(confirm);
        await InvokeAsync(StateHasChanged);
    }

    private async Task DenyConfirmationAsync(SteamGuardAccount account, Confirmation confirm)
    {
        await account.DenyConfirmation(confirm);
        _confirmations.GetValueOrDefault(account)?.Remove(confirm);
        await InvokeAsync(StateHasChanged);
    }

    private void GetAccounts()
    {
        try
        {
            var manifestDirectory = Path.Combine(Environment.ContentRootPath, Upload.UploadFolder, Settings.Username);
            _manifest = new Manifest(manifestDirectory);
            _manifest.LoadManifest();

            _accounts = _manifest.GetAccounts(Settings.Passkey);

            if (_accounts.Any())
            {
                _currentAccount = _accounts.FirstOrDefault();
            }
        }
        catch (Exception)
        {
            _manifest = null;
            _accounts = [];
        }
    }

    private async Task GetConfirmsAsync()
    {
        _confirmations = new();

        if (! Settings.AutoCheckConfirms || _currentAccount == null || ! await _confirmSemaphore.WaitAsync(0))
        {
            return;
        }

        if (Settings.OnlyCheckCurrentAccount)
        {
            await GetConfirmsForAccountAsync(_currentAccount);
        }
        else
        {
            foreach (var account in _accounts)
            {
                await GetConfirmsForAccountAsync(account);
            }
        }

        _confirmSemaphore.Release();
    }

    private async Task GetConfirmsForAccountAsync(SteamGuardAccount account)
    {
        if (account.Session.IsRefreshTokenExpired())
        {
            Logger.LogError($"Session for account {account.AccountName} has expired, re-login required.");
            return;
        }

        if (account.Session.IsAccessTokenExpired())
        {
            try
            {
                await account.Session.RefreshAccessToken();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex.Message);
                return;
            }
        }

        var confirms = await account.FetchConfirmationsAsync();

        if (confirms == null) return;

        var autoConfirms = new List<Confirmation>();
        var leftConfirms = new List<Confirmation>();

        foreach (var confirm in confirms)
        {
            if ((confirm.ConfType == Confirmation.EMobileConfirmationType.Trade && Settings.AutoConfirmTrades) ||
                (confirm.ConfType == Confirmation.EMobileConfirmationType.MarketListing && Settings.AutoConfirmMarketListing))
            {
                autoConfirms.Add(confirm);
            }
            else
            {
                leftConfirms.Add(confirm);
            }
        }

        if (autoConfirms.Any())
        {
            await account.AcceptMultipleConfirmations(autoConfirms.ToArray());
        }

        if (leftConfirms.Any())
        {
            if (!_confirmations.ContainsKey(account))
                _confirmations[account] = new();
            _confirmations[account].AddRange(leftConfirms);
        }

        await InvokeAsync(StateHasChanged);
    }

    private void SetCurrentCard(SteamGuardAccount account)
    {
        _currentAccount = account;
    }
}